// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protos/fira/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FiraService_GetApiInfo_FullMethodName            = "/protos.fira.v1.FiraService/GetApiInfo"
	FiraService_CreateAccount_FullMethodName         = "/protos.fira.v1.FiraService/CreateAccount"
	FiraService_VerifyAccount_FullMethodName         = "/protos.fira.v1.FiraService/VerifyAccount"
	FiraService_LoginAccount_FullMethodName          = "/protos.fira.v1.FiraService/LoginAccount"
	FiraService_BeginPasswordReset_FullMethodName    = "/protos.fira.v1.FiraService/BeginPasswordReset"
	FiraService_CreateApp_FullMethodName             = "/protos.fira.v1.FiraService/CreateApp"
	FiraService_ListApps_FullMethodName              = "/protos.fira.v1.FiraService/ListApps"
	FiraService_GetApp_FullMethodName                = "/protos.fira.v1.FiraService/GetApp"
	FiraService_RotateAppToken_FullMethodName        = "/protos.fira.v1.FiraService/RotateAppToken"
	FiraService_InvalidateAppToken_FullMethodName    = "/protos.fira.v1.FiraService/InvalidateAppToken"
	FiraService_CompletePasswordReset_FullMethodName = "/protos.fira.v1.FiraService/CompletePasswordReset"
	FiraService_GetAccount_FullMethodName            = "/protos.fira.v1.FiraService/GetAccount"
	FiraService_GetInstitutions_FullMethodName       = "/protos.fira.v1.FiraService/GetInstitutions"
	FiraService_CreateLinkSession_FullMethodName     = "/protos.fira.v1.FiraService/CreateLinkSession"
	FiraService_GetLinkSession_FullMethodName        = "/protos.fira.v1.FiraService/GetLinkSession"
)

// FiraServiceClient is the client API for FiraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiraServiceClient interface {
	GetApiInfo(ctx context.Context, in *GetApiInfoRequest, opts ...grpc.CallOption) (*GetApiInfoResponse, error)
	// Register a new account with the server. This will trigger an out-of-band verification for the user. As of now,
	// this will take the form of email verification.
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// Verify an unverified account using a token exchanged out-of-band with the account owner.
	VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponse, error)
	// Exchange email/password credentials for a session JWT
	LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error)
	// Start the password reset process. If the email is found, a password reset email will be sent to the account holder.
	BeginPasswordReset(ctx context.Context, in *BeginPasswordResetRequest, opts ...grpc.CallOption) (*BeginPasswordResetResponse, error)
	// Create an "App" - app are used to access the Fira data API.
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// Returns a list of all apps for the logged in user.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// Returns a single app for the logged in user.
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// Rotate the JWT for an app. The old token will still be valid until the expiration time.
	RotateAppToken(ctx context.Context, in *RotateAppTokenRequest, opts ...grpc.CallOption) (*RotateAppTokenResponse, error)
	// Invalidate an app token. This will immediately invalidate the token.
	InvalidateAppToken(ctx context.Context, in *InvalidateAppTokenRequest, opts ...grpc.CallOption) (*InvalidateAppTokenResponse, error)
	// Complete the password reset process. Provide the token from the password reset email and a new password.
	CompletePasswordReset(ctx context.Context, in *CompletePasswordResetRequest, opts ...grpc.CallOption) (*CompletePasswordResetResponse, error)
	// Retrieve the account information for the currently logged in account holder.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	GetInstitutions(ctx context.Context, in *GetInstitutionsRequest, opts ...grpc.CallOption) (*GetInstitutionsResponse, error)
	// Create a new link session. This will return a URL to redirect the user to where they will be able to select a
	// financial institution to connect to and log in.
	CreateLinkSession(ctx context.Context, in *CreateLinkSessionRequest, opts ...grpc.CallOption) (*CreateLinkSessionResponse, error)
	// Retrieve the status of a link session.
	GetLinkSession(ctx context.Context, in *GetLinkSessionRequest, opts ...grpc.CallOption) (*GetLinkSessionResponse, error)
}

type firaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFiraServiceClient(cc grpc.ClientConnInterface) FiraServiceClient {
	return &firaServiceClient{cc}
}

func (c *firaServiceClient) GetApiInfo(ctx context.Context, in *GetApiInfoRequest, opts ...grpc.CallOption) (*GetApiInfoResponse, error) {
	out := new(GetApiInfoResponse)
	err := c.cc.Invoke(ctx, FiraService_GetApiInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, FiraService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...grpc.CallOption) (*VerifyAccountResponse, error) {
	out := new(VerifyAccountResponse)
	err := c.cc.Invoke(ctx, FiraService_VerifyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) LoginAccount(ctx context.Context, in *LoginAccountRequest, opts ...grpc.CallOption) (*LoginAccountResponse, error) {
	out := new(LoginAccountResponse)
	err := c.cc.Invoke(ctx, FiraService_LoginAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) BeginPasswordReset(ctx context.Context, in *BeginPasswordResetRequest, opts ...grpc.CallOption) (*BeginPasswordResetResponse, error) {
	out := new(BeginPasswordResetResponse)
	err := c.cc.Invoke(ctx, FiraService_BeginPasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, FiraService_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, FiraService_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, FiraService_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) RotateAppToken(ctx context.Context, in *RotateAppTokenRequest, opts ...grpc.CallOption) (*RotateAppTokenResponse, error) {
	out := new(RotateAppTokenResponse)
	err := c.cc.Invoke(ctx, FiraService_RotateAppToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) InvalidateAppToken(ctx context.Context, in *InvalidateAppTokenRequest, opts ...grpc.CallOption) (*InvalidateAppTokenResponse, error) {
	out := new(InvalidateAppTokenResponse)
	err := c.cc.Invoke(ctx, FiraService_InvalidateAppToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) CompletePasswordReset(ctx context.Context, in *CompletePasswordResetRequest, opts ...grpc.CallOption) (*CompletePasswordResetResponse, error) {
	out := new(CompletePasswordResetResponse)
	err := c.cc.Invoke(ctx, FiraService_CompletePasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, FiraService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) GetInstitutions(ctx context.Context, in *GetInstitutionsRequest, opts ...grpc.CallOption) (*GetInstitutionsResponse, error) {
	out := new(GetInstitutionsResponse)
	err := c.cc.Invoke(ctx, FiraService_GetInstitutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) CreateLinkSession(ctx context.Context, in *CreateLinkSessionRequest, opts ...grpc.CallOption) (*CreateLinkSessionResponse, error) {
	out := new(CreateLinkSessionResponse)
	err := c.cc.Invoke(ctx, FiraService_CreateLinkSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firaServiceClient) GetLinkSession(ctx context.Context, in *GetLinkSessionRequest, opts ...grpc.CallOption) (*GetLinkSessionResponse, error) {
	out := new(GetLinkSessionResponse)
	err := c.cc.Invoke(ctx, FiraService_GetLinkSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiraServiceServer is the server API for FiraService service.
// All implementations must embed UnimplementedFiraServiceServer
// for forward compatibility
type FiraServiceServer interface {
	GetApiInfo(context.Context, *GetApiInfoRequest) (*GetApiInfoResponse, error)
	// Register a new account with the server. This will trigger an out-of-band verification for the user. As of now,
	// this will take the form of email verification.
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// Verify an unverified account using a token exchanged out-of-band with the account owner.
	VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponse, error)
	// Exchange email/password credentials for a session JWT
	LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error)
	// Start the password reset process. If the email is found, a password reset email will be sent to the account holder.
	BeginPasswordReset(context.Context, *BeginPasswordResetRequest) (*BeginPasswordResetResponse, error)
	// Create an "App" - app are used to access the Fira data API.
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// Returns a list of all apps for the logged in user.
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// Returns a single app for the logged in user.
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// Rotate the JWT for an app. The old token will still be valid until the expiration time.
	RotateAppToken(context.Context, *RotateAppTokenRequest) (*RotateAppTokenResponse, error)
	// Invalidate an app token. This will immediately invalidate the token.
	InvalidateAppToken(context.Context, *InvalidateAppTokenRequest) (*InvalidateAppTokenResponse, error)
	// Complete the password reset process. Provide the token from the password reset email and a new password.
	CompletePasswordReset(context.Context, *CompletePasswordResetRequest) (*CompletePasswordResetResponse, error)
	// Retrieve the account information for the currently logged in account holder.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	GetInstitutions(context.Context, *GetInstitutionsRequest) (*GetInstitutionsResponse, error)
	// Create a new link session. This will return a URL to redirect the user to where they will be able to select a
	// financial institution to connect to and log in.
	CreateLinkSession(context.Context, *CreateLinkSessionRequest) (*CreateLinkSessionResponse, error)
	// Retrieve the status of a link session.
	GetLinkSession(context.Context, *GetLinkSessionRequest) (*GetLinkSessionResponse, error)
	mustEmbedUnimplementedFiraServiceServer()
}

// UnimplementedFiraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFiraServiceServer struct {
}

func (UnimplementedFiraServiceServer) GetApiInfo(context.Context, *GetApiInfoRequest) (*GetApiInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiInfo not implemented")
}
func (UnimplementedFiraServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedFiraServiceServer) VerifyAccount(context.Context, *VerifyAccountRequest) (*VerifyAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccount not implemented")
}
func (UnimplementedFiraServiceServer) LoginAccount(context.Context, *LoginAccountRequest) (*LoginAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedFiraServiceServer) BeginPasswordReset(context.Context, *BeginPasswordResetRequest) (*BeginPasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginPasswordReset not implemented")
}
func (UnimplementedFiraServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedFiraServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedFiraServiceServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedFiraServiceServer) RotateAppToken(context.Context, *RotateAppTokenRequest) (*RotateAppTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAppToken not implemented")
}
func (UnimplementedFiraServiceServer) InvalidateAppToken(context.Context, *InvalidateAppTokenRequest) (*InvalidateAppTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAppToken not implemented")
}
func (UnimplementedFiraServiceServer) CompletePasswordReset(context.Context, *CompletePasswordResetRequest) (*CompletePasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePasswordReset not implemented")
}
func (UnimplementedFiraServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedFiraServiceServer) GetInstitutions(context.Context, *GetInstitutionsRequest) (*GetInstitutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstitutions not implemented")
}
func (UnimplementedFiraServiceServer) CreateLinkSession(context.Context, *CreateLinkSessionRequest) (*CreateLinkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkSession not implemented")
}
func (UnimplementedFiraServiceServer) GetLinkSession(context.Context, *GetLinkSessionRequest) (*GetLinkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkSession not implemented")
}
func (UnimplementedFiraServiceServer) mustEmbedUnimplementedFiraServiceServer() {}

// UnsafeFiraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiraServiceServer will
// result in compilation errors.
type UnsafeFiraServiceServer interface {
	mustEmbedUnimplementedFiraServiceServer()
}

func RegisterFiraServiceServer(s grpc.ServiceRegistrar, srv FiraServiceServer) {
	s.RegisterService(&FiraService_ServiceDesc, srv)
}

func _FiraService_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_GetApiInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).GetApiInfo(ctx, req.(*GetApiInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_VerifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).VerifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_VerifyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).VerifyAccount(ctx, req.(*VerifyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_LoginAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).LoginAccount(ctx, req.(*LoginAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_BeginPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).BeginPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_BeginPasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).BeginPasswordReset(ctx, req.(*BeginPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_RotateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).RotateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_RotateAppToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).RotateAppToken(ctx, req.(*RotateAppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_InvalidateAppToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAppTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).InvalidateAppToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_InvalidateAppToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).InvalidateAppToken(ctx, req.(*InvalidateAppTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_CompletePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).CompletePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_CompletePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).CompletePasswordReset(ctx, req.(*CompletePasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_GetInstitutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstitutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).GetInstitutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_GetInstitutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).GetInstitutions(ctx, req.(*GetInstitutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_CreateLinkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).CreateLinkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_CreateLinkSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).CreateLinkSession(ctx, req.(*CreateLinkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FiraService_GetLinkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiraServiceServer).GetLinkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FiraService_GetLinkSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiraServiceServer).GetLinkSession(ctx, req.(*GetLinkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FiraService_ServiceDesc is the grpc.ServiceDesc for FiraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FiraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.fira.v1.FiraService",
	HandlerType: (*FiraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApiInfo",
			Handler:    _FiraService_GetApiInfo_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _FiraService_CreateAccount_Handler,
		},
		{
			MethodName: "VerifyAccount",
			Handler:    _FiraService_VerifyAccount_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _FiraService_LoginAccount_Handler,
		},
		{
			MethodName: "BeginPasswordReset",
			Handler:    _FiraService_BeginPasswordReset_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _FiraService_CreateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _FiraService_ListApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _FiraService_GetApp_Handler,
		},
		{
			MethodName: "RotateAppToken",
			Handler:    _FiraService_RotateAppToken_Handler,
		},
		{
			MethodName: "InvalidateAppToken",
			Handler:    _FiraService_InvalidateAppToken_Handler,
		},
		{
			MethodName: "CompletePasswordReset",
			Handler:    _FiraService_CompletePasswordReset_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _FiraService_GetAccount_Handler,
		},
		{
			MethodName: "GetInstitutions",
			Handler:    _FiraService_GetInstitutions_Handler,
		},
		{
			MethodName: "CreateLinkSession",
			Handler:    _FiraService_CreateLinkSession_Handler,
		},
		{
			MethodName: "GetLinkSession",
			Handler:    _FiraService_GetLinkSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/fira/v1/api.proto",
}
