syntax = "proto3";

package protos.fira.v1;

import "protos/fira/v1/account-messages.proto";

option go_package = "github.com/opencorelabs/fira/gen/protos/go/protos/v1;v1";

message CreateAccountRequest {
  // Which namespace to create the account in
  AccountNamespace namespace = 1;

  // Login credentials for the new account
  LoginCredential credential = 2;
}

message CreateAccountResponse {
  // Status of the account registration. Most accounts will immediately go into the
  // ACCOUNT_REGISTRATION_STATUS_VERIFY_EMAIL status.
  AccountRegistrationStatus status = 1;

  // If the status was ACCOUNT_REGISTRATION_STATUS_ERROR, this will be the human-readable error message.
  string error_message = 2;

  // If the status is ACCOUNT_REGISTRATION_STATUS_OK, this will be the login JWT.
  string jwt = 3;
}

enum VerificationType {
  VERIFICATION_TYPE_UNSPECIFIED = 0;
  VERIFICATION_TYPE_EMAIL = 1;
}

message VerifyAccountRequest {
  // The verification_token provided in the URL.
  string token = 1;

  // The namespace to verify the account in.
  AccountNamespace namespace = 2;

  // The verification type, will also be provided in the URL.
  VerificationType type = 3;
}

message VerifyAccountResponse {
  // Status of the account registration. If the token was valid and not expired, this should be
  // ACCOUNT_REGISTRATION_STATUS_OK. Otherwise, the user may have to re-verify. To re-verify, use the log in endpoint
  // with email and password, setting the verify flag to true.
  AccountRegistrationStatus status = 1;

  // If the status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string error_message = 2;

  // If the token was valid, this will be a new login JWT.
  string jwt = 3;
}

message LoginAccountRequest {
  // Namespace to log the user into - must match the original namespace used to create the account.
  AccountNamespace namespace = 1;

  // Login credentials for the account
  LoginCredential credential = 2;
}

message LoginAccountResponse {
  // Status of the account
  AccountRegistrationStatus status = 1;

  // If status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string account_error_message = 2;

  // Whether the provided credentials were valid. If not, the JWT will not be provided.
  bool credentials_valid = 3;

  // If the credentials were valid, this will be a new login JWT.
  string jwt = 4;
}

message BeginPasswordResetRequest {
  // Namespace to log the user into - must match the original namespace used to create the account.
  AccountNamespace namespace = 1;

  // This will be used for building the URL in the password reset email.
  // For example, with a base URL of "https://myapp.net" will the link in the reset email will a "reset_token"
  // URL argument appended to it: "http://myapp.net?reset_token=zxb38rjs9nh"
  string reset_base_url = 2;

  // Email address of the account to reset.
  string email = 3;
}

message CompletePasswordResetRequest {
  // The reset_token provided in the URL.
  string token = 1;

  // New password for the account.
  string password = 3;
}

message CompletePasswordResetResponse {
  // Status of the password reset.
  AccountRegistrationStatus status = 1;

  // If status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string error_message = 2;

  // If the status is ACCOUNT_REGISTRATION_STATUS_OK, this will be a new login JWT.
  string jwt = 3;
}

// Placeholder - there is no information to return right now
// If the email exists, a reset email will be sent.
message BeginPasswordResetResponse {}

message GetAccountRequest {}
message GetAccountResponse {
  Account account = 1;
}
