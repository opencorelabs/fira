syntax = "proto3";

package protos.fira.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/opencorelabs/fira/gen/protos/go/protos/v1;v1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Fira API";
    version: "1.0.0";
    contact: {
      name: "Open Core Labs";
      url: "https://github.com/opencorelabs/fira";
      email: "pnwx@opencorelabs.org";
    };
    license: {
      name: "GNU Affero General Public License v3.0";
      url: "https://github.com/opencorelabs/fira/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-API-Key";
      }
    }
  }
};

message GetApiInfoRequest {}

message GetApiInfoResponse {
  message Version {
    int32 major = 1;
    int32 minor = 2;
    int32 patch = 3;
  }

  Version version = 1;
}

// Mark: Common messages

enum LinkSessionStatus {
  LINK_SESSION_STATUS_UNSPECIFIED = 0;
  LINK_SESSION_STATUS_CREATED = 1;
  LINK_SESSION_STATUS_IN_PROGRESS = 2;
  LINK_SESSION_STATUS_COMPLETE = 3;
  LINK_SESSION_STATUS_FAILED = 4;
}

message LinkError {}

// A link session represents an attempt by a user to connect to their financial institution, select accounts,
// and provide consent to data sharing.
message LinkSession {
  // The link ID. Use in URL to fetch status.
  string link_id = 1;

  // The configured redirect URI
  string redirect_uri = 2;

  // The configured connection to reconnect.
  string connection_id = 3;

  // Status of the current link. A timed out link will show up as failed.
  LinkSessionStatus status = 4;

  // If the link failed, this will be the LinkError object
  LinkError error = 5;

  // If the link was successful, this will be the resulting Connection object.
  Connection connection = 6;
}

message Connection {}

/// Mark: Request/Response messages

message CreateLinkSessionRequest {
  // This is the URL that will be redirected to once the user session is comp
  string redirect_uri = 1;
  // Use connection_id when reconnecting a lapsed connection.
  string connection_id = 2;
}

message CreateLinkSessionResponse {
  LinkSession link_session = 1;
}

message GetLinkSessionRequest {
  string link_id = 1;
}

message GetLinkSessionResponse {
  LinkSession link_session = 1;
}

// Accounts can be created within one of these namespaces.
enum AccountNamespace {
  ACCOUNT_NAMESPACE_UNSPECIFIED = 0;
  ACCOUNT_NAMESPACE_DEVELOPER = 1;
  ACCOUNT_NAMESPACE_CONSUMER = 2;
}

enum AccountCredentialType {
  ACCOUNT_CREDENTIAL_TYPE_UNSPECIFIED = 0;
  ACCOUNT_CREDENTIAL_TYPE_EMAIL = 1;
  ACCOUNT_CREDENTIAL_TYPE_OAUTH_GITHUB = 2;
}

message Account {
  AccountNamespace namespace = 2;
  AccountRegistrationStatus status = 3;
  AccountCredentialType credential_type = 4;

  string id = 20;

  // The account holder's name.
  string name = 22;

  // The account holder's email.
  string email = 23;

  // The account holder's avatar URL.
  string avatar_url = 24;

  // The account creation timestamp.
  google.protobuf.Timestamp created_at = 50;

  // The account last updated timestamp.
  google.protobuf.Timestamp updated_at = 51;
}

message CredentialTypeEmail {
  // The email address to use for the account.
  string email = 1;

  // The password to use for the account.
  string password = 2;

  // This will be used for building the URL in the verification email.
  // For example, with a base URL of "https://myapp.net" will the link in the verification email will a "verification_token"
  // URL argument appended to it: "http://myapp.net?verification_token=zxb38rjs9nh"
  // Use only for registration or re-verification
  string verification_base_url = 3;

  // Common name for the new account i.e. "Jane Smith" - provide if the credential type is email.
  // Use only for registration.
  string name = 4;

  // If true, re-send the email verification.
  bool verify = 5;
}

message CredentialTypeGithub {
  // Public client ID for the GitHub OAuth app - must match the client secret stored on the server.
  string client_id = 1;

  // The redirect URI configured for the GitHub OAuth app.
  string redirect_uri = 2;

  // The OAuth code returned by GitHub after the user has authorized the app.
  string code = 3;
}

message LoginCredential {
  AccountCredentialType credential_type = 1;
  CredentialTypeEmail email_credential = 2;
  CredentialTypeGithub github_credential = 3;
}

message CreateAccountRequest {
  // Which namespace to create the account in
  AccountNamespace namespace = 1;

  // Login credentials for the new account
  LoginCredential credential = 2;
}

enum AccountRegistrationStatus {
  ACCOUNT_REGISTRATION_STATUS_UNSPECIFIED = 0;
  ACCOUNT_REGISTRATION_STATUS_VERIFY_EMAIL = 1;
  ACCOUNT_REGISTRATION_STATUS_OK = 2;
  ACCOUNT_REGISTRATION_STATUS_ERROR = 99;
}

message CreateAccountResponse {
  // Status of the account registration. Most accounts will immediately go into the
  // ACCOUNT_REGISTRATION_STATUS_VERIFY_EMAIL status.
  AccountRegistrationStatus status = 1;

  // If the status was ACCOUNT_REGISTRATION_STATUS_ERROR, this will be the human-readable error message.
  string error_message = 2;

  // If the status is ACCOUNT_REGISTRATION_STATUS_OK, this will be the login JWT.
  string jwt = 3;
}

message VerifyAccountRequest {
  // The verification_token provided in the URL.
  string token = 1;
}

message VerifyAccountResponse {
  // Status of the account registration. If the token was valid and not expired, this should be
  // ACCOUNT_REGISTRATION_STATUS_OK. Otherwise, the user may have to re-verify. To re-verify, use the log in endpoint
  // with email and password, setting the verify flag to true.
  AccountRegistrationStatus status = 1;

  // If the status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string error_message = 2;

  // If the token was valid, this will be a new login JWT.
  string jwt = 3;
}

message LoginAccountRequest {
  // Namespace to log the user into - must match the original namespace used to create the account.
  AccountNamespace namespace = 1;

  // Login credentials for the account
  LoginCredential credential = 2;
}

message LoginAccountResponse {
  // Status of the account
  AccountRegistrationStatus status = 1;

  // If status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string account_error_message = 2;

  // Whether the provided credentials were valid. If not, the JWT will not be provided.
  bool credentials_valid = 3;

  // If the credentials were valid, this will be a new login JWT.
  string jwt = 4;
}

message BeginPasswordResetRequest {
  // Namespace to log the user into - must match the original namespace used to create the account.
  AccountNamespace namespace = 1;

  // This will be used for building the URL in the password reset email.
  // For example, with a base URL of "https://myapp.net" will the link in the reset email will a "reset_token"
  // URL argument appended to it: "http://myapp.net?reset_token=zxb38rjs9nh"
  string reset_base_url = 2;

  // Email address of the account to reset.
  string email = 3;
}

message CompletePasswordResetRequest {
  // The reset_token provided in the URL.
  string token = 1;

  // New password for the account.
  string password = 3;
}

message CompletePasswordResetResponse {
  // Status of the password reset.
  AccountRegistrationStatus status = 1;

  // If status is ACCOUNT_REGISTRATION_STATUS_ERROR this will be a human-readable message.
  string error_message = 2;

  // If the status is ACCOUNT_REGISTRATION_STATUS_OK, this will be a new login JWT.
  string jwt = 3;
}

// Placeholder - there is no information to return right now. If the email exists, a reset email will be sent.
message BeginPasswordResetResponse {}

message GetAccountRequest {}
message GetAccountResponse {
  Account account = 1;
}

service FiraService {
  rpc GetApiInfo(GetApiInfoRequest) returns (GetApiInfoResponse) {
    option (google.api.http) = {get: "/api/v1/info"};
  }

  // Register a new account with the server. This will trigger an out-of-band verification for the user. As of now,
  // this will take the form of email verification.
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/accounts/register"
      body: "*"
    };
  }

  // Verify an unverified account using a token exchanged out-of-band with the account owner.
  rpc VerifyAccount(VerifyAccountRequest) returns (VerifyAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/accounts/verify"
      body: "*"
    };
  }

  // Exchange email/password credentials for a session JWT
  rpc LoginAccount(LoginAccountRequest) returns (LoginAccountResponse) {
    option (google.api.http) = {
      post: "/api/v1/accounts/login"
      body: "*"
    };
  }

  // Start the password reset process. If the email is found, a password reset email will be sent to the account holder.
  rpc BeginPasswordReset(BeginPasswordResetRequest) returns (BeginPasswordResetResponse) {
    option (google.api.http) = {
      post: "/api/v1/accounts/request_password_reset"
      body: "*"
    };
  }

  // Complete the password reset process. Provide the token from the password reset email and a new password.
  rpc CompletePasswordReset(CompletePasswordResetRequest) returns (CompletePasswordResetResponse) {
    option (google.api.http) = {
      post: "/api/v1/accounts/complete_password_reset"
      body: "*"
    };
  }

  // Retrieve the account information for the currently logged in account holder.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
      get: "/api/v1/accounts/me"
      response_body: "account"
    };
  }

  // Create a new link session. This will return a URL to redirect the user to where they will be able to select a
  // financial institution to connect to and log in.
  rpc CreateLinkSession(CreateLinkSessionRequest) returns (CreateLinkSessionResponse) {
    option (google.api.http) = {
      post: "/api/v1/link"
      body: "*"
      response_body: "link_session"
    };
  }

  // Retrieve the status of a link session.
  rpc GetLinkSession(GetLinkSessionRequest) returns (GetLinkSessionResponse) {
    option (google.api.http) = {
      get: "/api/v1/link/{link_id}"
      response_body: "link_session"
    };
  }
}